// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MobilityCampaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MobilityCampaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MobilityCampaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MobilityCampaign", id.toString(), this);
  }

  static load(id: string): MobilityCampaign | null {
    return store.get("MobilityCampaign", id) as MobilityCampaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idx(): BigInt {
    let value = this.get("idx");
    return value.toBigInt();
  }

  set idx(value: BigInt) {
    this.set("idx", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get organization(): string | null {
    let value = this.get("organization");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set organization(value: string | null) {
    if (value === null) {
      this.unset("organization");
    } else {
      this.set("organization", Value.fromString(value as string));
    }
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get closedAtCampaignReceivers(): BigInt {
    let value = this.get("closedAtCampaignReceivers");
    return value.toBigInt();
  }

  set closedAtCampaignReceivers(value: BigInt) {
    this.set("closedAtCampaignReceivers", Value.fromBigInt(value));
  }
}

export class MobilityCampaignOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MobilityCampaignOwner entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MobilityCampaignOwner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MobilityCampaignOwner", id.toString(), this);
  }

  static load(id: string): MobilityCampaignOwner | null {
    return store.get(
      "MobilityCampaignOwner",
      id
    ) as MobilityCampaignOwner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get campaigns(): Array<string> {
    let value = this.get("campaigns");
    return value.toStringArray();
  }

  set campaigns(value: Array<string>) {
    this.set("campaigns", Value.fromStringArray(value));
  }

  get totalContributedWei(): BigInt {
    let value = this.get("totalContributedWei");
    return value.toBigInt();
  }

  set totalContributedWei(value: BigInt) {
    this.set("totalContributedWei", Value.fromBigInt(value));
  }
}

export class RewardOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RewardOwner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RewardOwner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RewardOwner", id.toString(), this);
  }

  static load(id: string): RewardOwner | null {
    return store.get("RewardOwner", id) as RewardOwner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get enabledAt(): BigInt {
    let value = this.get("enabledAt");
    return value.toBigInt();
  }

  set enabledAt(value: BigInt) {
    this.set("enabledAt", Value.fromBigInt(value));
  }

  get enabledAtCampaignIdx(): BigInt {
    let value = this.get("enabledAtCampaignIdx");
    return value.toBigInt();
  }

  set enabledAtCampaignIdx(value: BigInt) {
    this.set("enabledAtCampaignIdx", Value.fromBigInt(value));
  }

  get totalRewardsWei(): BigInt | null {
    let value = this.get("totalRewardsWei");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsWei(value: BigInt | null) {
    if (value === null) {
      this.unset("totalRewardsWei");
    } else {
      this.set("totalRewardsWei", Value.fromBigInt(value as BigInt));
    }
  }

  get rewards(): Array<string> {
    let value = this.get("rewards");
    return value.toStringArray();
  }

  set rewards(value: Array<string>) {
    this.set("rewards", Value.fromStringArray(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reward", id.toString(), this);
  }

  static load(id: string): Reward | null {
    return store.get("Reward", id) as Reward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get rewardsWei(): BigInt {
    let value = this.get("rewardsWei");
    return value.toBigInt();
  }

  set rewardsWei(value: BigInt) {
    this.set("rewardsWei", Value.fromBigInt(value));
  }

  get withdrewAt(): BigInt {
    let value = this.get("withdrewAt");
    return value.toBigInt();
  }

  set withdrewAt(value: BigInt) {
    this.set("withdrewAt", Value.fromBigInt(value));
  }
}
